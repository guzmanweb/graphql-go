--- internal/exec/resolvable/resolvable.go
+++ internal/exec/resolvable/resolvable.go
@@ -11,12 +11,18 @@ import (
 	"github.com/guzmanweb/graphql-go/internal/schema"
 )
 
+type Resolvers struct {
+	QueryResolver    interface{}
+	MutationResolver interface{}
+}
+
 type Schema struct {
 	schema.Schema
-	Query        Resolvable
-	Mutation     Resolvable
-	Subscription Resolvable
-	Resolver     reflect.Value
+	Query            Resolvable
+	Mutation         Resolvable
+	ResolverQuery    reflect.Value
+	ResolverMutation reflect.Value
+	Subscription     Resolvable
 }
 
 type Resolvable interface {
@@ -55,19 +61,19 @@ func (*Object) isResolvable() {}
 func (*List) isResolvable()   {}
 func (*Scalar) isResolvable() {}
 
-func ApplyResolver(s *schema.Schema, resolver interface{}) (*Schema, error) {
+func ApplyResolver(s *schema.Schema, resolver Resolvers) (*Schema, error) {
 	b := newBuilder(s)
 
 	var query, mutation, subscription Resolvable
 
 	if t, ok := s.EntryPoints["query"]; ok {
-		if err := b.assignExec(&query, t, reflect.TypeOf(resolver)); err != nil {
+		if err := b.assignExec(&query, t, reflect.TypeOf(resolver.QueryResolver)); err != nil {
 			return nil, err
 		}
 	}
 
 	if t, ok := s.EntryPoints["mutation"]; ok {
-		if err := b.assignExec(&mutation, t, reflect.TypeOf(resolver)); err != nil {
+		if err := b.assignExec(&mutation, t, reflect.TypeOf(resolver.MutationResolver)); err != nil {
 			return nil, err
 		}
 	}
@@ -83,11 +89,12 @@ func ApplyResolver(s *schema.Schema, resolver interface{}) (*Schema, error) {
 	}
 
 	return &Schema{
-		Schema:       *s,
-		Resolver:     reflect.ValueOf(resolver),
-		Query:        query,
-		Mutation:     mutation,
-		Subscription: subscription,
+		Schema:           *s,
+		ResolverQuery:    reflect.ValueOf(resolver.QueryResolver),
+		ResolverMutation: reflect.ValueOf(resolver.MutationResolver),
+		Query:            query,
+		Mutation:         mutation,
+		Subscription:     subscription,
 	}, nil
 }
 
